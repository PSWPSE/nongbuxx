---
globs: "*.js,*.py"
description: "Frontend와 Backend 간 데이터 구조 및 API 일관성 유지 가이드라인"
---

# 🔄 Frontend-Backend 동기화 가이드라인

## 🎯 **핵심 원칙**

### 1️⃣ **데이터 구조 일관성**
- Frontend가 사용하는 모든 ID/필드는 Backend API 응답과 정확히 일치해야 함
- 하드코딩된 값 대신 API에서 동적으로 로드
- localStorage/sessionStorage에 저장된 구버전 데이터 정기 검증

### 2️⃣ **API 계약 준수**
```javascript
// ✅ 좋은 예: API 응답 구조 검증
const response = await fetch('/api/sources/extractable')
if (response.data?.sources) {
    selectedSourceIds = response.data.sources.map(s => s.id)
}

// ❌ 나쁜 예: 가정에 의존
selectedSourceIds = ['yahoo_finance', 'source_004b8459'] // 하드코딩
```

## 🔍 **변경 시 체크리스트**

### Backend 변경 시
- [ ] API 응답 스키마 변경 사항 확인
- [ ] Frontend에서 사용하는 모든 필드/ID 영향도 분석
- [ ] 기존 브라우저 캐시와의 호환성 고려

### Frontend 변경 시  
- [ ] API 엔드포인트 정확성 확인
- [ ] 에러 처리 로직 구현
- [ ] 로딩 상태 및 사용자 피드백 제공

## 🛡️ **안전 패턴**

### API 호출 패턴
```javascript
// 권장 패턴: 에러 처리 포함
async function loadSources() {
    try {
        const response = await fetch('/api/sources/extractable')
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`)
        }
        const result = await response.json()
        return result.data?.sources || []
    } catch (error) {
        console.error('Sources load failed:', error)
        showToast('출처 로드 실패', 'error')
        return [] // 안전한 기본값
    }
}
```

### 데이터 검증 패턴
```python
# Backend: 응답 데이터 검증
def get_extractable_sources():
    sources = get_all_extractable_sources()
    # 필수 필드 검증
    for source in sources:
        assert 'id' in source, f"Source missing ID: {source}"
        assert 'full_url' in source, f"Source missing full_url: {source['id']}"
    return sources
```

## ⚠️ **위험 신호들**

- 브라우저 콘솔에 404/400 에러
- 하드코딩된 소스 ID 사용
- API 응답 구조 가정 (optional chaining 없이)
- localStorage에 구버전 데이터 잔존

---
**💡 Frontend와 Backend는 하나의 시스템입니다. 둘 중 하나만 업데이트하면 전체가 망가집니다!**
