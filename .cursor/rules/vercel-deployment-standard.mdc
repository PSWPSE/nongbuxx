# 🚀 Vercel 배포 표준 가이드라인

## 📋 **배포 전 필수 체크리스트**

### 1️⃣ **코드 변경사항 검증**
- [ ] `converter.py` 함수들이 정상 작동하는지 로컬 테스트 완료
- [ ] 백엔드 서버 (`python3 app.py`) 정상 구동 확인
- [ ] 프론트엔드 서버 (`cd frontend && python -m http.server 3000`) 정상 구동 확인
- [ ] 브라우저에서 http://localhost:3000 접속 및 기능 테스트 완료

### 2️⃣ **Git 상태 확인 및 커밋**
```bash
# 1. 현재 상태 확인
git status

# 2. 모든 변경사항 추가
git add .

# 3. 의미있는 커밋 메시지로 커밋
git commit -m "feat: [기능명] - [간단한 설명]

- 주요 변경사항 1
- 주요 변경사항 2
- 관련 파일들 업데이트"

# 4. 원격 저장소에 푸시
git push origin main
```

### 3️⃣ **빠른 배포 실행**
```bash
# 배포 스크립트에 실행 권한 부여 (최초 1회)
chmod +x deploy-quick.sh

# 빠른 배포 실행
./deploy-quick.sh
```

## 🎯 **표준 배포 프로세스**

### ✅ **권장 배포 방법: `deploy-quick.sh`**
- **장점**: 가장 빠름 (약 10초), 간단함, 신뢰성 높음
- **대상**: Vercel 프로덕션 환경
- **자동화**: 프론트엔드 빌드 및 배포 자동 처리

### 📊 **배포 후 확인 사항**
```bash
# 배포 상태 확인
./deploy-status.sh

# 라이브 사이트 확인
open https://nongbuxxfrontend.vercel.app/
```

## 🔧 **배포 관련 파일 구조**

### 📁 **핵심 배포 스크립트들**
- `deploy-quick.sh`: **메인 배포 스크립트** (가장 권장)
- `deploy-status.sh`: 배포 상태 확인
- `deploy-vercel.sh`: 상세 Vercel 배포 (고급 옵션)
- `deploy-railway.sh`: Railway 배포 (백엔드용)

### 📋 **Vercel 설정 파일들**
- `frontend/vercel.json`: Vercel 배포 설정
- `frontend/package.json`: 프론트엔드 의존성

## 🚨 **주의사항 및 트러블슈팅**

### ⚠️ **배포 전 주의사항**
- **로컬 테스트 필수**: 배포 전 반드시 로컬에서 정상 작동 확인
- **커밋 메시지 명확화**: 변경사항을 명확하게 기록
- **브레이킹 체인지 방지**: 기존 기능 영향도 사전 검토

### 🛠️ **자주 발생하는 문제 해결**
```bash
# 1. Vercel CLI 로그인 문제
vercel login

# 2. 캐시 문제 해결
vercel --force

# 3. 프로젝트 링크 재설정
cd frontend && vercel link
```

### 🔄 **롤백 방법**
```bash
# 1. 이전 Git 커밋으로 되돌리기
git revert HEAD

# 2. 다시 배포
./deploy-quick.sh

# 3. 또는 Vercel 대시보드에서 이전 배포본으로 즉시 롤백
```

## 📈 **성능 및 모니터링**

### 🎯 **배포 성능 목표**
- **배포 시간**: 15초 이내
- **빌드 성공률**: 95% 이상  
- **사이트 응답 속도**: 2초 이내

### 📊 **모니터링 방법**
- Vercel 대시보드에서 실시간 모니터링
- 배포 후 기능 테스트 자동화
- 사용자 피드백 모니터링

## 💡 **효율적인 배포 워크플로우**

### 🔄 **일반적인 개발-배포 사이클**
1. **로컬 개발** → 기능 구현 및 테스트
2. **Git 커밋** → 변경사항 기록
3. **빠른 배포** → `./deploy-quick.sh` 실행  
4. **배포 확인** → 라이브 사이트에서 기능 검증
5. **필요시 핫픽스** → 문제 발견 시 즉시 수정 및 재배포

### 🎭 **배포 시나리오별 가이드**
- **긴급 수정**: 즉시 `deploy-quick.sh` 사용
- **대규모 업데이트**: 충분한 테스트 후 배포
- **실험적 기능**: 별도 브랜치에서 작업 후 배포

---

**⚡ 요약: 변경사항 → Git 커밋 → `./deploy-quick.sh` → 확인 완료!**

**🎯 목표: 1분 이내 안전하고 빠른 배포 완성!**
